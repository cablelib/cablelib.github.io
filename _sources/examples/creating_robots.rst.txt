Creating Robots
===============

In general the procedure of creating Cable-Driven Parallel Robots (CDPR) is outlined as

1. Defining points of the base frame and platform
2. Instantiating all necessary objects (BaseFrame, Platform, Cable, Winche, Pulley)
3. Connecting each cable to the base frame and platform
4. Creating the CableDrivenParallelRobot object

If the installation in :doc:`/usage` was succesfull then you will be
able to import the necessary components of the module with

.. code-block:: python

    from cablelib_isw_pybindings.robot import BaseFrame, Cable, Platform, Winch, CableDrivenParallelRobot, Pulley

The creation of CableDrivenParallelRobots objects is illustrated using the
geometry of the IPAnema1 developed by Fraunhofer IPA.

First the points of the base frame and platform are defined in
a list of a list of three floats.

.. code-block:: python

    base_frame_pivot_points = [
        [-2, 1.5, 2],
        [2, 1.5, 2],
        [2, -1.5, 2],
        [-2, -1.5, 2],
        [-2, 1.5, 0],
        [2, 1.5, 0],
        [2, -1.5, 0],
        [-2, -1.5, 0]
    ]

    platform_pivot_points = [
        [-0.06, 0.06, 0],
        [0.06, 0.06, 0],
        [0.06, -0.06, 0],
        [-0.06, -0.06, 0],
    ]
    
with this information all necessary components of a CDPR can be instantiated.

.. code-block:: python

    base_frame = BaseFrame(base_frame_pivot_points)
    platform = Platform(platform_pivot_points)

    cable1 = Cable(1.0, 10.0)
    cable2 = Cable(1.0, 10.0)
    cable3 = Cable(1.0, 10.0)
    cable4 = Cable(1.0, 10.0)
    cable5 = Cable(1.0, 10.0)
    cable6 = Cable(1.0, 10.0)
    cable7 = Cable(1.0, 10.0)
    cable8 = Cable(1.0, 10.0)

    cables = [
        cable1, cable2, cable3, cable4, cable5, cable6, cable7, cable8
    ]

    winches = [
        Winch([cable1]),
        Winch([cable2]),
        Winch([cable3]),
        Winch([cable4]),
        Winch([cable5]),
        Winch([cable6]),
        Winch([cable7]),
        Winch([cable8])
    ]
    
Cables are constructed with their minimum and maximum allowed force.
Winches are supplied with a list of cables which are wound by that winch.
Pulleys are constructed with a 3d rotation matrix and a radius.

.. code-block:: python

   pulley = Pulley(
        [[1, 0, 0],
         [0, 1, 0],
         [0, 0, 1]],
        0.05
    )

The next step will be to connect each cable to a point on the base frame and
on the platform respectively.
Each cable is supplied a pulley. In this case, the pulley is
always the same, it can therefore be reused.

More complicated designs may require a different pulley for various cables, making
a shortcut in the attachment of base frame points, platform
points and pulleys impossible as is illustrated in the code
example below. Such cases will have to define these points
for each cable manually, without the use of loops.

.. code-block:: python

    i = 0
    for cable in cables:
        cable.base_frame_attachment_point = base_frame_pivot_points[i]
        cable.platform_attachment_point = platform_pivot_points[i % 4]
        cable.pulley = pulley
        i += 1

Now the CableDrivenParallelRobot object can be instantiated

.. code-block:: python

    ipa_nema_1 = CableDrivenParallelRobot(
        "IPAnema1",
        base_frame,
        platform,
        winches,
        cables
    )
    
And putting it all together results in

.. code-block:: python
    :linenos:

    from cablelib_isw_pybindings.robot import BaseFrame, Cable, Platform, Winch, \
        CableDrivenParallelRobot, Pulley

    if __name__ == "__main__":
        # Step 1: Define points of the base frame and platform.
        base_frame_pivot_points = [
            [-2, 1.5, 2],
            [2, 1.5, 2],
            [2, -1.5, 2],
            [-2, -1.5, 2],
            [-2, 1.5, 0],
            [2, 1.5, 0],
            [2, -1.5, 0],
            [-2, -1.5, 0]
        ]

        platform_pivot_points = [
            [-0.06, 0.06, 0],
            [0.06, 0.06, 0],
            [0.06, -0.06, 0],
            [-0.06, -0.06, 0],
        ]

        # Step 2: Instantiate all necessary objects.
        base_frame = BaseFrame(base_frame_pivot_points)
        platform = Platform(platform_pivot_points)

        cable1 = Cable(1.0, 10.0)
        cable2 = Cable(1.0, 10.0)
        cable3 = Cable(1.0, 10.0)
        cable4 = Cable(1.0, 10.0)
        cable5 = Cable(1.0, 10.0)
        cable6 = Cable(1.0, 10.0)
        cable7 = Cable(1.0, 10.0)
        cable8 = Cable(1.0, 10.0)

        cables = [
            cable1, cable2, cable3, cable4, cable5, cable6, cable7, cable8
        ]

        winches = [
            Winch([cable1]),
            Winch([cable2]),
            Winch([cable3]),
            Winch([cable4]),
            Winch([cable5]),
            Winch([cable6]),
            Winch([cable7]),
            Winch([cable8])
        ]

        pulley = Pulley(
            [[1, 0, 0],
             [0, 1, 0],
             [0, 0, 1]],
            0.05
        )

        # Step 3: Connect each cable to a point on the base frame and
        # a point on the platform.
        i = 0
        for cable in cables:
            cable.base_frame_attachment_point = base_frame_pivot_points[i]
            cable.platform_attachment_point = platform_pivot_points[i % 4]
            cable.pulley = pulley
            i += 1

        # Step 4: Instantiate the CableDrivenParallelRobot object.
        ipa_nema_1 = CableDrivenParallelRobot(
            "IPAnema1",
            base_frame,
            platform,
            winches,
            cables
        )
        
Saving and Loading
-------------------

CDPRs can be saved in xml format.
For example, the created robot in the previous example
can be saved by calling

.. code-block:: python
    
    ipa_nema_1.save_xml("ipa_nema_1.xml")

and loaded with

.. code-block:: python
    
    robot = cablelib_isw.CableDrivenParallelRobot.load_xml("ipa_nema_1.xml")

Legacy CDPRs can be loaded with the class LegacyRobotConverter

.. code-block:: python

    robot = LegacyRobotConverter.load_wcrfx(test_resource_path + "IPAnema.wcrfx")
