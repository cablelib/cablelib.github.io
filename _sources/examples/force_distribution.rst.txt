Calculating the force distribution
===================================

This example prerequisites a saved xml of the IPAnema1
as described in :doc:`./creating_robots`.

The necessary components for the force distribution are

.. code-block:: python

   from cablelib_isw_pybindings.analysis import ForceDistribution
   from cablelib_isw_pybindings.analysis import KinematicStrategyStandard, \
       KinematicStrategyPulley
   from cablelib_isw_pybindings.analysis.force_distribution_strategy import \
       ClosedForm, Dykstra
   from cablelib_isw_pybindings.robot import CableDrivenParallelRobot
   from cablelib_isw_pybindings.types import Pose, Wrench

Create a force distribution object with

.. code-block:: python

    fd = ForceDistribution(robot, force_distribution_strategy=ClosedForm(),
                        kinematic_strategy=KinematicStrategyStandard())

The force distribution can be configured with the utilized algorithm
and whether or not pulleys are considered.
Available force distribution algorithms can be found :doc:`here <../generated/cablelib_isw_pybindings.analysis.force_distribution_strategy>`.
The default is the closed form force distribution strategy with the
standard kinematic model.

Calling the calculate method with a pose and a wrench will
return a force distribution.

.. code-block:: python

    closed_form_result = fd.calculate(pose, wrench)

Example for the calculation of a force distribution:

.. code-block:: python
   :linenos:

   from cablelib_isw_pybindings.analysis import ForceDistribution
   from cablelib_isw_pybindings.analysis import KinematicStrategyStandard, \
       KinematicStrategyPulley
   from cablelib_isw_pybindings.analysis.force_distribution_strategy import \
       ClosedForm, Dykstra
   from cablelib_isw_pybindings.robot import CableDrivenParallelRobot
   from cablelib_isw_pybindings.types import Pose, Wrench

   robot = CableDrivenParallelRobot.load_xml("ipa_nema_1.xml")

   pose = Pose([1.06, -0.457, 1.763], [[0.6274449, 0.4889770, 0.6059822],
                                    [0.1387336, 0.6955824, -0.7049242],
                                    [-0.7662023, 0.5263711, 0.3686022]])

   # If not otherwise specified on construction, the default force distribution
   # strategy will be closed form. The default kinematic strategy will be the
   # standard model, i.e. without pulley kinematics.
   fd = ForceDistribution(robot, force_distribution_strategy=ClosedForm(),
                       kinematic_strategy=KinematicStrategyStandard())
   # Default wrench is (0, 0, 0, 0, 0, 0)
   closed_form_result = fd.calculate(pose, Wrench())

   # Customize the strategies after construction
   fd.force_distribution_strategy = Dykstra()
   fd.kinematic_strategy = KinematicStrategyPulley()

   dykstra_pulley_result = fd.calculate(pose, Wrench())

.. _custom-projection-points:

Custom projection points
------------------------

Various algorithms such as :doc:`ClosedForm <../generated/cablelib_isw_pybindings.analysis.force_distribution_strategy.ClosedForm>`,
:doc:`ImprovedClosedForm <../generated/cablelib_isw_pybindings.analysis.force_distribution_strategy.ImprovedClosedForm>`
or :doc:`Dykstra <../generated/cablelib_isw_pybindings.analysis.force_distribution_strategy.Dykstra>`
can be customized by setting their projection point. Especially in the case
of the Dykstra algorithm, this can speed up the convergence. Each constructor
of a ForceDistributionStrategy allows customized parameters when available.

ClosedForm
##########

This code will use the user-supplied ``f_ref`` as projection point for the
closed form method to create a ``ForceDistribution`` object, assuming that
a ``CableDrivenParallelRobot`` object named ``robot`` exists.

.. code-block:: python

   f_ref = np.array([5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5])
   closed_form_strategy = ClosedForm(f_ref)

   fd = ForceDistribution(robot, closed_form_strategy)

ImprovedClosedForm
###################

As the improved closed form method is a recursive algorithm, it requires
a function ``f_ref -> f(f_min, f_max)`` to calculate ``f_ref`` in each recursion step. Notable care needs
to be taken in the dimension of ``f_ref`` which needs to of be the same dimension
as ``f_min`` or ``f_max``. This following example defines the function ``f(f_min, f_max) = (f_min + f_max) / 2``
to be used in the improved closed form.

.. code-block:: python

   calculate_f_ref = lambda f_min, f_max: (f_min + f_max) / 2

   improved_closed_form_strategy = ImprovedClosedForm(calculate_f_ref)

   fd = ForceDistribution(robot, improved_closed_form_strategy)